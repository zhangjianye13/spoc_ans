个人思考题

总体介绍

(1) ucore的线程控制块数据结构是什么？
 proc_struct

(2) 如何知道ucore的两个线程同在一个进程？
 查看proc_struct中的cr3和mm_struct是否一样，如果一样就来自一个进程

(3) context和trapframe分别在什么时候用到？
 切入或切出当前进程时会用到context
 在中断、异常或者系统调用时会用到trapframe

(4) 用户态或内核态下的中断处理有什么区别？在trapframe中有什么体现？
 用户态进入中断需要从用户态进入内核态，所以涉及到栈的切换。在trapframe中的体现是，需要切换特权级时要保存ss和esp值
(5) do_fork中的内核线程执行的第一条指令是什么？它是如何过渡到内核线程对应的函数的？
 执行的第一条指令在kern\process\entry.S
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
    call *%ebx              # call fn

    pushl %eax              # save the return value of fn(arg)
    call do_exit            # call do_exit to terminate current thread 
 将参数压栈之后就调用之前存入ebx中的fn函数

(6)内核线程的堆栈初始化在哪？
 在proc。c中的copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf)

(7)fork()父子进程的返回值是不同的。这在源代码中的体现中哪？
 父进程调用fork()时，返回的是子进程的pid
 proc.c 中：ret = proc->pid;
 而子进程被设置成返回值是0
 proc.c调用的copy_thread()函数：proc->tf->tf_regs.reg_eax = 0
(8)内核线程initproc的第一次执行流程是什么样的？能跟踪出来吗
 init.c::kern_init() -> proc.c::proc_init() -> proc.c::kern_thread() -> proc.c::do_fork() -> proc.c::copy_thread